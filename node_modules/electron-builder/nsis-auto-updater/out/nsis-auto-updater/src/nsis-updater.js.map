{
  "version": 3,
  "file": "nsis-updater.js",
  "sourceRoot": "",
  "sources": [
    "../../../src/nsis-updater.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { EventEmitter } from \"events\"\nimport { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { tmpdir } from \"os\"\nimport { BintrayOptions } from \"../../src/publish/bintray\"\nimport semver = require(\"semver\")\nimport { download } from \"../../src/util/httpRequest\"\nimport { Provider, UpdateCheckResult } from \"./api\"\nimport { BintrayProvider } from \"./BintrayProvider\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../../src/util/awaiter\")\n\nexport class NsisUpdater extends EventEmitter {\n  private setupPath: string | null\n\n  private updateAvailable = false\n  private quitAndInstallCalled = false\n\n  private client: Provider\n\n  private readonly app: any\n\n  constructor(public updateUrl?: string) {\n    super()\n\n    this.app = (<any>global).__test_app || require(\"electron\").app\n  }\n\n  getFeedURL(): string | null | undefined {\n    return this.updateUrl\n  }\n\n  setFeedURL(value: string | BintrayOptions) {\n    this.updateUrl = value.toString()\n\n    this.client = new BintrayProvider(<BintrayOptions>value)\n  }\n\n  checkForUpdates(): Promise<UpdateCheckResult> {\n    if (this.updateUrl == null) {\n      const message = \"Update URL is not set\"\n      this.emitError(message)\n      return BluebirdPromise.reject(new Error(message))\n    }\n\n    this.emit(\"checking-for-update\")\n    return this.doCheckForUpdates()\n      .catch(error => this.emitError(error))\n  }\n\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\n    const versionInfo = await this.client.getLatestVersion()\n\n    const latestVersion = semver.valid(versionInfo.version)\n    if (latestVersion == null) {\n      throw new Error(`Latest version (from update server) is not valid semver version: \"${latestVersion}`)\n    }\n\n    const currentVersion = semver.valid(this.app.getVersion())\n    if (currentVersion == null) {\n      throw new Error(`App version is not valid semver version: \"${currentVersion}`)\n    }\n\n    if (semver.gte(currentVersion, latestVersion)) {\n      this.updateAvailable = false\n      this.emit(\"update-not-available\")\n      return {\n        versionInfo: versionInfo,\n      }\n    }\n\n    const fileInfo = await this.client.getUpdateFile(versionInfo)\n\n    this.updateAvailable = true\n    this.emit(\"update-available\")\n\n    const mkdtemp: any = BluebirdPromise.promisify(require(\"fs\").mkdtemp)\n    return {\n      versionInfo: versionInfo,\n      fileInfo: fileInfo,\n      downloadPromise: mkdtemp(`${path.join(tmpdir(), \"up\")}-`)\n        .then((it: string) => {\n          this.setupPath = path.join(it, fileInfo.name)\n          return download(fileInfo.url, this.setupPath)\n        }),\n    }\n  }\n\n  quitAndInstall(): void {\n    const setupPath = this.setupPath\n    if (!this.updateAvailable || setupPath == null) {\n      this.emitError(\"No update available, can't quit and install\")\n      return\n    }\n\n    if (this.quitAndInstallCalled) {\n      return\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    spawn(setupPath!!, [\"/S\"], {\n      detached: true,\n      stdio: \"ignore\",\n    }).unref()\n\n    this.app.quit()\n  }\n\n  // emit both error object and message, this is to keep compatibility with old APIs\n  private emitError(message: string) {\n    return this.emit(\"error\", new Error(message), message)\n  }\n}"
  ]
}
